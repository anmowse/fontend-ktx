component USERDetail
C√°ch s·ª≠ d·ª•ng component n√†y
Component UserDetails ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng, bao g·ªìm:

Th√¥ng tin c√° nh√¢n
Th√¥ng tin ph√≤ng ·ªü
Th√¥ng tin h·ª£p ƒë·ªìng
L·ªãch s·ª≠ thanh to√°n
ƒê·ªÉ s·ª≠ d·ª•ng component n√†y, b·∫°n c·∫ßn truy·ªÅn v√†o hai props:

userId: ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn xem chi ti·∫øt
onClose: H√†m s·∫Ω ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng nh·∫•n n√∫t ƒë√≥ng
V√≠ d·ª•:

import React, { useState } from 'react';
import UserDetails from '../components/users/UserDetails';

const UsersPage = () => {
  const [selectedUserId, setSelectedUserId] = useState(null);
  
  const openUserDetails = (userId) => {
    setSelectedUserId(userId);
  };
  
  const closeUserDetails = () => {
    setSelectedUserId(null);
  };
  
  return (
    <div>
      {/* Danh s√°ch ng∆∞·ªùi d√πng v√† c√°c ph·∫ßn kh√°c */}
      
      {/* Hi·ªÉn th·ªã chi ti·∫øt khi c√≥ userId ƒë∆∞·ª£c ch·ªçn */}
      {selectedUserId && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4">
          <UserDetails userId={selectedUserId} onClose={closeUserDetails} />
        </div>
      )}
    </div>
  );
};

src/
|-- assets/
|   |-- images/
|   |-- styles/
|   |   |-- index.css
|   |   |-- tailwind.css
|
|-- components/
|   |-- common/
|   |   |-- Button.jsx
|   |   |-- Card.jsx
|   |   |-- Input.jsx
|   |   |-- Modal.jsx
|   |   |-- Notification.jsx
|   |   |-- Pagination.jsx
|   |   |-- Table.jsx
|   |
|   |-- layouts/
|   |   |-- MainLayout.jsx
|   |   |-- AdminLayout.jsx
|   |   |-- UserLayout.jsx
|   |   |-- AuthLayout.jsx
|
|-- features/
|   |-- admin/
|   |   |-- components/
|   |   |   |-- Dashboard/
|   |   |   |   |-- DashboardStats.jsx
|   |   |   |   |-- DashboardCharts.jsx
|   |   |   |
|   |   |   |-- Users/
|   |   |   |   |-- UserTable.jsx
|   |   |   |   |-- UserForm.jsx
|   |   |   |   |-- UserDetails.jsx
|   |   |   |
|   |   |   |-- Rooms/
|   |   |   |   |-- RoomTable.jsx
|   |   |   |   |-- RoomForm.jsx
|   |   |   |   |-- RoomDetails.jsx
|   |   |   |
|   |   |   |-- Contracts/
|   |   |   |   |-- ContractTable.jsx
|   |   |   |   |-- ContractForm.jsx
|   |   |   |   |-- ContractDetails.jsx
|   |   |   |
|   |   |   |-- Payments/
|   |   |   |   |-- PaymentTable.jsx
|   |   |   |   |-- PaymentForm.jsx
|   |   |   |   |-- PaymentDetails.jsx
|   |   |
|   |   |-- pages/
|   |   |   |-- DashboardPage.jsx
|   |   |   |-- UsersPage.jsx
|   |   |   |-- RoomsPage.jsx
|   |   |   |-- ContractsPage.jsx
|   |   |   |-- PaymentsPage.jsx
|   |   |   |-- SettingsPage.jsx
|   |
|   |-- user/
|   |   |-- components/
|   |   |   |-- Profile/
|   |   |   |   |-- ProfileInfo.jsx
|   |   |   |   |-- ProfileEdit.jsx
|   |   |   |
|   |   |   |-- Room/
|   |   |   |   |-- RoomCard.jsx
|   |   |   |   |-- RoomDetails.jsx
|   |   |   |
|   |   |   |-- Contract/
|   |   |   |   |-- ContractList.jsx
|   |   |   |   |-- ContractDetails.jsx
|   |   |   |
|   |   |   |-- Payment/
|   |   |   |   |-- PaymentHistory.jsx
|   |   |   |   |-- PaymentForm.jsx
|   |   |
|   |   |-- pages/
|   |   |   |-- DashboardPage.jsx
|   |   |   |-- ProfilePage.jsx
|   |   |   |-- RoomInfoPage.jsx
|   |   |   |-- ContractsPage.jsx
|   |   |   |-- PaymentsPage.jsx
|   |
|   |-- auth/
|   |   |-- components/
|   |   |   |-- LoginForm.jsx
|   |   |   |-- RegisterForm.jsx
|   |   |   |-- ForgotPasswordForm.jsx
|   |   |
|   |   |-- pages/
|   |   |   |-- LoginPage.jsx
|   |   |   |-- RegisterPage.jsx
|   |   |   |-- ForgotPasswordPage.jsx
|
|-- hooks/
|   |-- useAuth.js
|   |-- usePagination.js
|   |-- useModal.js
|   |-- useNotification.js
|   |-- useForm.js
|
|-- services/
|   |-- api.js (Axios instance setup)
|   |-- authService.js
|   |-- userService.js
|   |-- roomService.js
|   |-- contractService.js
|   |-- paymentService.js
|
|-- utils/
|   |-- dateUtils.js
|   |-- formatUtils.js
|   |-- validationUtils.js
|   |-- storageUtils.js
|
|-- context/
|   |-- AuthContext.jsx
|   |-- ThemeContext.jsx
|   |-- NotificationContext.jsx
|
|-- routes/
|   |-- PrivateRoute.jsx
|   |-- AdminRoute.jsx
|   |-- UserRoute.jsx
|   |-- routes.js (route definitions)
|
|-- App.jsx
|-- main.jsx

Quan ly ph√≤ng nh√©
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ admin/
‚îÇ       ‚îî‚îÄ‚îÄ room/
‚îÇ           ‚îú‚îÄ‚îÄ RoomList.jsx           # Hi·ªÉn th·ªã danh s√°ch ph√≤ng
‚îÇ           ‚îú‚îÄ‚îÄ RoomForm.jsx           # Form th√™m/s·ª≠a ph√≤ng
‚îÇ           ‚îú‚îÄ‚îÄ RoomFilter.jsx         # L·ªçc ph√≤ng theo t√≤a nh√†, lo·∫°i,...
‚îÇ           ‚îú‚îÄ‚îÄ RoomCard.jsx           # Card hi·ªÉn th·ªã th√¥ng tin ph√≤ng
‚îÇ           ‚îî‚îÄ‚îÄ RoomDetail.jsx         # Hi·ªÉn th·ªã chi ti·∫øt ph√≤ng
‚îÇ
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îî‚îÄ‚îÄ admin/
‚îÇ       ‚îî‚îÄ‚îÄ RoomManagement.jsx         # Trang qu·∫£n l√Ω ph√≤ng
‚îÇ
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ roomService.js                 # API services li√™n quan ƒë·∫øn ph√≤ng
‚îÇ
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ formatters.js                  # H√†m format d·ªØ li·ªáu (v√≠ d·ª•: format gi√°)
‚îÇ
‚îî‚îÄ‚îÄ hooks/
    ‚îî‚îÄ‚îÄ useRooms.js                    # Custom hook cho vi·ªác qu·∫£n l√Ω ph√≤ng



contract

üìÇ pages
  üìÇ admin
    üìÑ RoomManagement.jsx (ƒë√£ c√≥)
    üìÑ ContractManagement.jsx (c·∫ßn t·∫°o)
üìÇ components
  üìÇ admin
    üìÇ contract
      üìÑ ContractList.jsx       (Hi·ªÉn th·ªã danh s√°ch h·ª£p ƒë·ªìng d·∫°ng b·∫£ng)
      üìÑ ContractCard.jsx       (Hi·ªÉn th·ªã h·ª£p ƒë·ªìng d·∫°ng card)
      üìÑ ContractForm.jsx       (Form t·∫°o m·ªõi/ch·ªânh s·ª≠a h·ª£p ƒë·ªìng)
      üìÑ ContractFilter.jsx     (B·ªô l·ªçc t√¨m ki·∫øm h·ª£p ƒë·ªìng)
      üìÑ ContractDetail.jsx     (Xem chi ti·∫øt h·ª£p ƒë·ªìng)
      üìÑ ContractPrint.jsx      (Component in h·ª£p ƒë·ªìng)















/fontend-KTX/fontend-ktx
  /src
    /admin
      /components
        /RoomManagement
          RoomList.jsx
          RoomForm.jsx
          RoomDetails.jsx
        /UserManagement
          // User management components
      /pages
        RoomsPage.jsx
        UsersPage.jsx
        DashboardPage.jsx
    /user
      /components
        // User-specific components
      /pages
        // User-specific pages
    /shared
      /components
        Button.jsx
        Table.jsx
        Modal.jsx
        // Other shared components
      /utils
        apiUtils.js
        formatUtils.js
    /services
      roomService.js
      userService.js
      buildingService.js
    /assets
      /css
      /images
    App.js
    index.js

    H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng component ContractPrint
1. Trong ContractManagement.jsx ho·∫∑c ContractDetail.jsx:
import ContractPrint from "../../components/admin/contract/ContractPrint";

// H√†m x·ª≠ l√Ω in h·ª£p ƒë·ªìng
const handlePrintContract = (contract) => {
  // T√¨m th√¥ng tin li√™n quan
  const room = rooms.find(r => r.id_rooms === contract.id_rooms);
  const user = users.find(u => u.id_users === contract.id_users);
  
  // M·ªü c·ª≠a s·ªï m·ªõi ƒë·ªÉ in
  const printWindow = window.open('', '_blank');
  
  if (printWindow) {
    printWindow.document.write(`
      <html>
        <head>
          <title>H·ª£p ƒë·ªìng ${contract.contract_code}</title>
          <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
        </head>
        <body>
          <div id="print-root"></div>
        </body>
      </html>
    `);
    
    // Render component v√†o c·ª≠a s·ªï m·ªõi
    ReactDOM.render(
      <ContractPrint 
        contract={contract} 
        room={room} 
        user={user} 
        autoprint={true} 
      />,
      printWindow.document.getElementById('print-root')
    );
  } else {
    alert("Vui l√≤ng cho ph√©p tr√¨nh duy·ªát m·ªü c·ª≠a s·ªï pop-up ƒë·ªÉ in h·ª£p ƒë·ªìng.");
  }
};
2. Ho·∫∑c hi·ªÉn th·ªã trong modal:
{isShowingPrintPreview && selectedContract && (
  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 overflow-y-auto">
    <div className="bg-white rounded-lg shadow-xl overflow-hidden w-full max-w-4xl h-full max-h-screen overflow-y-auto">
      <ContractPrint
        contract={selectedContract}
        room={rooms.find(r => r.id_rooms === selectedContract.id_rooms)}
        user={users.find(u => u.id_users === selectedContract.id_users)}
        onClose={() => setIsShowingPrintPreview(false)}
      />
    </div>
  </div>
)}

3. C√°ch S·ª≠ D·ª•ng Trong Component Cha
ƒê·ªÉ s·ª≠ d·ª•ng c√°c component n√†y, b·∫°n c·∫ßn l·∫•y d·ªØ li·ªáu t·ª´ API c·ªßa c√°c b·∫£ng li√™n quan:
// Trong ContractManagement.jsx
// Trong ContractManagement.jsx
useEffect(() => {
  const fetchAllData = async () => {
    try {
      // L·∫•y danh s√°ch h·ª£p ƒë·ªìng
      const contractsRes = await axios.get('http://127.0.0.1:8000/api/contracts');
      setContracts(contractsRes.data);
      
      // L·∫•y danh s√°ch ph√≤ng
      const roomsRes = await axios.get('http://127.0.0.1:8000/api/rooms');
      setRooms(roomsRes.data);
      
      // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
      const usersRes = await axios.get('http://127.0.0.1:8000/api/users');
      setUsers(usersRes.data);
      
      // L·∫•y thanh to√°n
      const paymentsRes = await axios.get('http://127.0.0.1:8000/api/payments');
      setPayments(paymentsRes.data);
      
      // L·∫•y d·ªãch v·ª•
      const servicesRes = await axios.get('http://127.0.0.1:8000/api/services');
      setServices(servicesRes.data);
      
      // L·∫•y d·ªãch v·ª• ƒëƒÉng k√Ω cho h·ª£p ƒë·ªìng
      const contractServicesRes = await axios.get('http://127.0.0.1:8000/api/contract_services');
      setContractServices(contractServicesRes.data);
      
    } catch (error) {
      console.error('Error fetching data:', error);
      setError('C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu');
    } finally {
      setLoading(false);
    }
  };
  
  fetchAllData();
}, []);
4. T√≥m T·∫Øt C√°c ƒêi·ªÅu Ch·ªânh
C·∫•u tr√∫c d·ªØ li·ªáu: ƒê√£ ƒëi·ªÅu ch·ªânh ƒë·ªÉ l√†m vi·ªác v·ªõi c·∫•u tr√∫c DB c·ªßa b·∫°n

B·∫£ng Contracts ch·ªâ c√≥ c√°c tr∆∞·ªùng c∆° b·∫£n (id_contracts, id_users, id_rooms, start_date, end_date)
Thanh to√°n l·∫•y t·ª´ b·∫£ng Payments ri√™ng bi·ªát
D·ªãch v·ª• l·∫•y t·ª´ b·∫£ng Services v√† Contract_Service
T√≠nh to√°n tr·∫°ng th√°i: Thay v√¨ l∆∞u tr·ª±c ti·∫øp tr·∫°ng th√°i, ch√∫ng t√¥i t√≠nh to√°n d·ª±a tr√™n ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c

Pending: Ch∆∞a ƒë·∫øn ng√†y b·∫Øt ƒë·∫ßu
Active: Trong kho·∫£ng th·ªùi gian h·ª£p ƒë·ªìng
Expired: ƒê√£ qua ng√†y k·∫øt th√∫c
Hi·ªÉn th·ªã d·ªãch v·ª•: Hi·ªÉn th·ªã danh s√°ch d·ªãch v·ª• ƒëƒÉng k√Ω cho t·ª´ng h·ª£p ƒë·ªìng

Thanh to√°n: Hi·ªÉn th·ªã l·ªãch s·ª≠ thanh to√°n v√† t·ªïng ti·ªÅn ƒë√£ thanh to√°n